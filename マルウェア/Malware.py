import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from IPython.display import display
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

def get_top_features(importances, feature_names, n=15):
    indices = np.argsort(importances)[::-1]  # 重要度の高い順にインデックスを取得
    top_feature_indices = indices[:n]  # 上位n個の特徴量のインデックスを取得
    top_features = feature_names[top_feature_indices]  # 上位n個の特徴量名を取得
    return top_features

data = pd.read_csv('./MalwareData.csv',sep='|')
print(data.dtypes)

label_encoder = LabelEncoder()
#文字を数値に加工
data['Name'] = label_encoder.fit_transform(data['Name'])
data['md5'] = label_encoder.fit_transform(data['md5'])
#print(data.info())#欠損値確認(今回はなし)

labels = data.columns
feature_names = data.columns[:-1]
data_array = data.values#データ型をDataFlameからnpへ
ms = MinMaxScaler()
data_array = ms.fit_transform(data_array)#標準化
x= data_array[:,:-1]
y=data_array[:,-1]
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1)
model = RandomForestClassifier()
model.fit(x_train, y_train)
pred = model.predict(x_test)
print("Randomforest_normall score is "+str(accuracy_score(y_test, pred)*100)+"%")





importances = model.feature_importances_
top_n_features = get_top_features(importances, feature_names)
selected_columns = data.loc[:, top_n_features]
selected_columns_array=selected_columns.values
selected_columns_array = ms.fit_transform(selected_columns_array)#標準化
x= selected_columns_array[:,:]
y=data_array[:,-1]
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1)
model = RandomForestClassifier()
model.fit(x_train, y_train)
pred = model.predict(x_test)
print("Randomforest_best score is "+str(accuracy_score(y_test, pred)*100)+"%")




#plt.figure(figsize = (30,15))　各特徴量の重要度を表示
#plt.barh(y = range(len(importances)), width = importances)
#plt.yticks(ticks = range(len(labels)), labels = labels)
#plt.show()


